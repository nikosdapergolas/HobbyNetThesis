@page "/chats"
@inject IPostsService _postsService
@inject IUserService _userService
@inject IChatsService _chatService
@inject IFollowersService _followerService
@inject IConfiguration _config
@inject NavigationManager navManager
@attribute [Authorize]

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <!-- User list sidebar -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Chats</h5>
                </div>
                <div class="card-body">
                    <!-- List of users with whom the current user has chats -->
                    @foreach (var user in following)
                    {
                        <div class="user-item" @onclick="()=> SelectUser(user)">
                            <img src="@user.profileImage" alt="@user.username" class="profile-picture" />
                            <span>@user.username</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        @if (loading)
        {
            <br />
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <div class="col-md-8">
                <!-- Chat window -->
                @if (selectedUser != null)
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">@selectedUser.username</h5>
                        </div>
                        <div class="card-body chat-window">
                            <!-- Messages will be displayed here -->
                            @if (chatWithOneUser is not null)
                            {
                                @foreach (var message in chatWithOneUser.chatMessages)
                                {
                                    <p class="text-muted text-center">@message.timestamp</p>
                                    @if (message.messageSender.Equals(loggedInUser.username))
                                    {
                                        <div style="flex-direction: row-reverse;" class="message">
                                            <img src="@loggedInUser.profileImage" alt="Profile" class="profile-picture" />
                                            <div class="message-content">
                                                <span class="sender">@message.messageSender</span>
                                                <p>@message.messageBody</p>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message">
                                            <img src="@selectedUser.profileImage" alt="Profile" class="profile-picture" />
                                            <div class="message-content">
                                                <span class="sender">@message.messageSender</span>
                                                <p>@message.messageBody</p>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <div class="card-footer">
                            <!-- Message input box -->
                            <input type="text" class="form-control" @bind="@newMessage" />
                            <button class="btn btn-primary" @onclick="SendMessage">Send</button>
                        </div>
                    </div>
                }
            </div>
        }

        
    </div>
</div>

@code {
    bool loading = false;
    //List<Chat> chatsOfThisUser = new();
    Chat chatWithOneUser = new();
    User loggedInUser = new();
    IEnumerable<User> following = new List<User>();

    User selectedUser = new();
    List<Message> selectedUserMessages = new List<Message>();
    string newMessage = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        selectedUser = new();
        loggedInUser = new();
        chatWithOneUser = new();
        //chatsOfThisUser = new();

        loading = false;
        newMessage = string.Empty;

        var authState = await AuthState;
        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
        try
        {
            // To get the credentials of the loggen in user
            loggedInUser = await _userService.GetOneUserByUsername(userName);

            // To see who this user follows
            following = await _followerService.GetFollowersOfOnePersonAsUsers(userName);

            // Getting all the chats of the Logged in User
            //chatsOfThisUser = await _chatService.GetAllChatsOfOneUser(loggedInUser.username);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// This Function will assign a value the username that got clicked by the user,
    /// and then call the LoadMessages() Function to actually load all the messages
    /// between the loggen in user and the chosen user
    /// </summary>
    /// <param name="username">The username Chosen</param>
    async Task SelectUser(User userThatWasSelected)
    {
        loading = true;
        selectedUser = userThatWasSelected;

        // Load messages for the selected user
        await LoadMessages();

        //Terminate the loading animation
        loading = false;
    }

    /// <summary>
    /// This function Will take care of the post Request of the new message
    /// </summary>
    async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            loading = true;

            // Send the message to the selected user
            CreateNewMessageInChatDTO newMessageInChatDTO = new();
            newMessageInChatDTO.sender = loggedInUser.username;
            newMessageInChatDTO.receiver = selectedUser.username;
            newMessageInChatDTO.messageBody = newMessage;
            await _chatService.CreateANewChatMessage(newMessageInChatDTO);

            loading = false;
            newMessage = string.Empty;
            navManager.NavigateTo(navManager.Uri, forceLoad: true);

            //// Send the message to the selected user (you will need to implement this)
            ////SendMessage(selectedUser, newMessage);
            //selectedUserMessages.Add(new Message { SenderUsername = "You", Content = newMessage });
            //newMessage = "";
        }
    }

    /// <summary>
    /// This function is called when the user clicks on a user in the left side of the screen.
    /// It's job is to call the endpoint where it loads all the messages between:
    /// a) The Logged in User
    /// b) The user that got clicked
    /// </summary>
    /// <param name="user">The user in the left card to show the messages</param>
    /// <returns></returns>
    async Task LoadMessages()
    {
        GetConversationOfTwoUsers twoUsers = new();
        twoUsers.User1 = loggedInUser;
        twoUsers.User2 = selectedUser;

        try
        {
            chatWithOneUser = await _chatService.GetConversationBetweenTwoUsers(twoUsers);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
