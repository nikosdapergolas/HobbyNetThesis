@page "/profile"
@using System.Net.Http.Headers;
@inject IPostsService _postsService
@inject IUserService _userSerice
@inject IFollowersService _followersService
@inject IConfiguration _config
@inject NavigationManager navManager
@inject HttpClient _http
@attribute [Authorize]

<section class="h-100 gradient-custom-2">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-lg-9 col-xl-7">
                <div class="card">
                    <div class="rounded-top text-white d-flex flex-row position-relative" style="background-color: #000; height:200px;">
                        <div class="ms-4 mt-5 d-flex flex-column position-relative" style="width: 150px;">
                            
                            <!-- Profile Picture-->

                            @*<img src="@user.profileImage"
                            alt="Generic placeholder image" class="img-fluid img-thumbnail mt-4 mb-2"
                            style="width: 150px; height:200px; z-index: 1;">*@

                            <div class="ratio ratio-1x1">
                                <img src="@user.profileImage" alt="Generic placeholder image" class="img-fluid img-thumbnail">
                            </div>

                            <!-- Change Profile Picture-->

                            @*<button type="button" class="btn btn-outline-dark"
                                    data-bs-toggle="modal"
                                    data-bs-target="#pictureModal"
                                    data-mdb-ripple-color="dark"
                                    style="z-index: 1;">
                                Change picture
                            </button>*@
                            <button type="button" class="btn btn-outline-dark"
                                    data-bs-toggle="modal"
                                    data-bs-target="#pictureModal"
                                    data-mdb-ripple-color="dark"
                                    style="z-index: 1;">
                                Change Picture
                            </button>

                            <!-- Edit Profile Button -->
                            <button type="button" class="btn btn-outline-dark" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#postModal"
                                    data-mdb-ripple-color="dark"
                                    style="z-index: 1;">
                                Edit profile
                            </button>
                        </div>
                        <div class="ms-3" style="margin-top: 130px;">
                            <h5>@user.firstname @user.lastname</h5>
                            <p>Hobbyist</p>
                        </div>
                    </div>
                    <div class="p-4 text-black" style="background-color: #f8f9fa;">
                        <div class="d-flex justify-content-end text-center py-1">
                            <div class ="px-3">
                                <p class="mb-1 h5">@numberOfPosts</p>
                                <p class="small text-muted mb-0">Posts</p>
                            </div>
                            <div class ="px-3">
                                <p class="mb-1 h5">@user.Hobbies.Count</p>
                                <p class="small text-muted mb-0"> Hobbies</p>
                            </div>
                            <div class="px-3">
                                <p class="mb-1 h5">@followers.Count()</p>
                                <p class="small text-muted mb-0">Followers</p>
                            </div>
                            <div class="px-3">
                                <p class="mb-1 h5">@following.Count()</p>
                                <p class="small text-muted mb-0">Following</p>
                            </div>
                        </div>
                    </div>

                    <br />
                    <br />

                    <div class="card-body p-4 text-black">
                        <div class="mb-5">
                            <p class="lead fw-normal mb-1">About</p>
                            <div class="p-4" style="background-color: #f8f9fa;">
                                <p class="font-italic mb-1"><b>Username:</b> @user.username</p>
                                <p class="font-italic mb-1"><b>First name:</b> @user.firstname</p>
                                <p class="font-italic mb-0"><b>Last name:</b> @user.lastname</p>
                                <p class="font-italic mb-0"><b>E-mail:</b> @user.email</p>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <p class="lead fw-normal mb-0">Recent posts from this user.</p>
                            @*<p class="mb-0"><a href="#!" class="text-muted">Show all</a></p>*@
                        </div>
                        <br />
                        <br />

                        <div class="card-deck" id="postCardDeck">
                            @foreach (var post in posts)
                            {
                                <div class="card mb-4 rounded-pill">
                                    <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between rounded-pill">
                                        <div class="d-flex align-items-center">
                                            <div class="rounded-circle profile-picture">
                                                <!-- Profile Picture Image -->
                                                <img src="@user.profileImage" alt="Profile Picture" />
                                            </div>
                                            <div class="ms-3">
                                                <h5 class="card-title">@post.Username</h5>
                                                <small class="text-white">@post.HobbyName</small>
                                                <br />
                                                <small class="text-white">@post.timestamp.ToString("MMMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                        <div class="nav-item dropdown">
                                            <!-- Post Options Button (e.g., Like, Comment, Share) -->
                                            <button type="button" class="btn btn-link text-white" data-bs-toggle="dropdown" id="dropdownToggle">
                                                <i class="fas fa-ellipsis-h"></i>
                                            </button>

                                            <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                                                <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#EditPostModal" @onclick="() => assingTheRightPostIdForEdit(post.Id,post.body)">Edit Post</a>
                                                <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deletePostModal" @onclick="() => assingTheRightPostId(post.Id)">Delete Post</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <p class="card-text fs-5 lh-lg">@post.body</p>
                                    </div>
                                    <div class="card-footer bg-secondary rounded-pill">
                                        <!-- Like, Comment, Share Buttons -->
                                        <LikeButton OnLike="() => LikeAPost(post.Id)" LikeCount="@post.postLikes.Count" />
                                        &nbsp;
                                        &nbsp;
                                        &nbsp;
                                        &nbsp;
                                        @*<button type="button" class="btn btn-success rounded-pill" data-bs-toggle="modal" data-bs-target="#CommentsModal" @onclick="() => fillListWithComments(post.comments, post.Id)">
                                            <i class="far fa-comment-alt"></i> Comments | @post.comments?.Count
                                        </button>
                                        &nbsp;
                                        &nbsp;
                                        &nbsp;
                                        &nbsp;
                                        <button type="button" class="btn btn-dark rounded-pill">
                                            <i class="fas fa-share"></i> Share
                                        </button>*@
                                    </div>
                                </div>
                            }

                            @if (posts.Count.Equals(0))
                            {
                                <div class="container d-flex justify-content-center align-items-center vh-10">
                                    <div class="text-center">
                                        <h1>No posts were found from this user</h1>
                                    </div>
                                </div>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!--Modal for profile Edit-->
<div class="modal fade" id="postModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Update your profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="userEditDTO" OnValidSubmit="EditUser">
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText class="form-control" @bind-Value="userEditDTO.email" id="email" />
                    </div>
                    <div class="form-group">
                        <label for="firstname">First Name</label>
                        <InputText class="form-control" @bind-Value="userEditDTO.firstname" id="firstname" />
                    </div>
                    <div class="form-group">
                        <label for="lastname">Last Name</label>
                        <InputText class="form-control" @bind-Value="userEditDTO.lastname" id="lastname" />
                    </div>
                    <br />
                    <br />
                    <div class="text-center">
                        <button class="btn btn-primary btn-lg" type="submit">Edit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!--Modal for uploading new profile picture-->
<div class="modal fade" id="pictureModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="pictureModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Change your profile picture</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <h1>Upload a new picture</h1>

                <InputFile OnChange="@OnInputFileChange" class="form-control" accept=".png,.jpg,.jpeg" />


               @if (errors.Count > 0)
                {
                    <h2>Errors</h2>
                    <ul class="text-danger">
                        @foreach (var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }

                <br />
                <br />

                <button @onclick="@refreshPage" class="btn btn-primary">Upload</button>

            </div>
        </div>
    </div>
</div>

<!--Modal for Deleting a Post-->
<div class="modal fade" id="deletePostModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deletePostModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2> Are you sure you want to delete this post?</h2>
                <br />
                <br />
                <button class="btn btn-primary rounded-pill" @onclick="@deletePost">
                    Yes. Delete it
                </button>
            </div>
        </div>
    </div>
</div>

<!--Modal for Editing a post-->
<div class="modal fade" id="EditPostModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="EditPostModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postEditDTO" OnValidSubmit="EditPost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postEditDTO.body"
                                       id="editBody"
                                       placeholder="What's on your mind?"
                                       class="form-control"
                                       rows="8"
                                       style="resize: none;"
                                       MaxLength="250">

                            @postEditDTO.body;

                        </InputTextArea>
                    </div>
                    <br />
                    @*<div class="text-center">
                    <button class="btn btn-primary btn-lg" type="submit">Post</button>
                    </div>*@
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Submit Edit</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!--Modal for Comments on a Post-->
<div class="modal fade" id="CommentsModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="CommentsModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Comments of this post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <br />
                @foreach (var comment in listOfComments)
                {
                    <h5> User: @comment.user.username</h5>
                    <h3><b>@comment.body</b></h3>
                    <hr />
                }
                <EditForm Model="commentDTO">
                    <InputTextArea @bind-Value="commentDTO.body"
                                   id="postBody"
                                   placeholder="Write a comment for this post."
                                   class="form-control"
                                   rows="8"
                                   style="resize: none;"
                                   MaxLength="250" />
                </EditForm>

                <br>
                <button class="btn btn-primary rounded-pill" @onclick="@CommentOnPost">
                    Send Comment
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    //----------------------------------------------
    // Picture upload section

    private long maxFileSize = 1024 * 1024 * 8; // Represents 8MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    private string fileName = string.Empty;
    private UploadResult uploadResult = new();
    //private IBrowserFile? file;

    //----------------------------------------------

    CommentDTO commentDTO = new();
    List<Comment> listOfComments = new();
    LikePostDTO likePostDTO = new();
    PostEditDTO postEditDTO = new();
    User user = new();
    List<Post> posts = new();
    UserEditDTO userEditDTO = new();
    IEnumerable<string> followers = new List<string>();
    IEnumerable<string> following = new List<string>();
    string image = string.Empty;

    int PostIdToDelete;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private int numberOfPosts = 0;
    private string userName = string.Empty;
    private string name = string.Empty;
    private string postBody { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        likePostDTO = new();
        PostIdToDelete = -1;

        var authState = await AuthState;

        // Initialising the EditUser DTO in case he edits his profile
        userEditDTO = new();

        //image = _config.GetValue<string>("api") + "/images/default.jpg";

        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
        //name = authState.User.FindFirst(ClaimTypes.Name).Value;
        //image = authState.User.FindFirst(ClaimTypes.Uri).Value;

        user = await _userSerice.GetOneUserByUsername(userName);


        try
        {
            //image = _config.GetValue<string>("api") + user.profileImage;

            // To see who follows this user
            followers = await _followersService.GetFollowersOfOnePerson(userName);

            // To see how many people this person follows
            following = await _followersService.GetAllPeopleOneUserFollows(userName);

            posts = await _postsService.GetPostsFromOneUser(userName);
            numberOfPosts = posts.Count();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void EditUser()
    {
        try
        {
            userEditDTO.username = userName;
            var result = _userSerice.EditUserProfile(userEditDTO);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
        finally
        {
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        errors.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                // In this Part I will try to protect my Project's code
                // by renaming the file the user wanted to upload
                // but still using the same file extension he chose (png,jpg, etc..)

                string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(),
                    Path.GetExtension(file.Name));

                string path = Path.Combine(
                    _config.GetValue<string>("FileStorage")!,
                    userName,
                    newFileName);

                string relativePath = Path.Combine(userName, newFileName);

                // This part makes sure that in the target Directory, there is
                // a folder named after the username of the logged in user.
                // If not, then it creates it.
                Directory.CreateDirectory(Path.Combine(
                    _config.GetValue<string>("FileStorage")!,
                    userName));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                errors.Add($"File {file.Name} Error: {ex.Message}");
            }
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileName = file.Name;

            content.Add(
                content: fileContent,
                name: "\"file\"",
                fileName: file.Name
            );
        }

        var response = await _http.PostAsync(_config.GetValue<string>("uploadImageFile"), content);
        var newUploadResult = await response.Content.ReadFromJsonAsync<UploadResult>();

        if (newUploadResult is not null)
        {
            uploadResult = newUploadResult;
        }
    }

    private async Task refreshPage()
    {
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task deletePost()
    {
        var response = _postsService.DeletePost(PostIdToDelete);
        // Refresh After deletion
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task assingTheRightPostId(int postId)
    {
        PostIdToDelete = postId;
    }

    private async Task EditPost()
    {
        var response = _postsService.EditPost(postEditDTO);
        // Refresh After deletion
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task assingTheRightPostIdForEdit(int postId, string body)
    {
        postEditDTO.Id = postId;
        postEditDTO.body = body;
    }

    private async Task LikeAPost(int postId)
    {
        likePostDTO = new();
        likePostDTO.postId = postId;
        likePostDTO.userId = user.Id;
        var result = await _postsService.LikePost(likePostDTO);

        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task fillListWithComments(List<Comment> comments, int postId)
    {
        commentDTO.postId = postId;
        listOfComments = new();
        foreach (var comment in comments)
        {
            listOfComments.Add(comment);
        }
    }

    private async Task CommentOnPost()
    {
        commentDTO.username = user.username;
        var result = await _postsService.CommentPost(commentDTO);

        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }
}
