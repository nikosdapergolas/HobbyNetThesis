@page "/posts"
@inject IPostsService _postsService
@inject IConfiguration _config
@inject NavigationManager navManager

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime


<section class="container mt-5">
    <!-- Create a new post -->
    @*<EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">
        <div class="mb-4">
            <h4>Post Your Thoughts</h4>
            <div class="card">
                <div class="card-body">
                    <InputTextArea @bind-Value="postCreateDTO.body" placeholder="What's on your mind?" class="form-control mb-2" />
                    <button class="btn btn-primary" type="submit">Post</button>
                </div>
            </div>
        </div>
    </EditForm>*@

    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
        Post your Thoughts
    </button>
    <br />
    <br />

    <!-- Display existing posts -->
    <div>
        <h4>Recent Posts</h4>
        @foreach (var post in posts)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">@post.Username</h5>
                    <p class="card-text">@post.body</p>
                    <small class="text-muted">@post.timestamp.ToString("MMMM dd, yyyy")</small>
                </div>
            </div>
        }
    </div>
</section>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Post your Thoughts</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Create a new post -->
                <EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">                    
                    <div class="card">
                        <div class="card-body">
                            <InputTextArea @bind-Value="postCreateDTO.body" placeholder="What's on your mind?" class="form-control mb-2" />
                            <button class="btn btn-primary" type="submit">Post</button>
                        </div>
                    </div>                    
                </EditForm>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                &nbsp;
                &nbsp;
                <button type="button" class="btn btn-success">Post</button>*@
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
@*<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Post your Thoughts</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                . . .
                <section class="intro">
                    <div class="bg-image h-100" style="background-color: #f5f7fa;">
                        <div class="mask d-flex align-items-center h-100">
                            <div class="container">
                                <div class="row justify-content-center">
                                    <div class="col-12">
                                        <div class="card">
                                            <div class="card-body p-0">
                                                <!-- Create a new post -->
                                                <EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">
                                                    <div class="mb-4">
                                                        <h4>Post Your Thoughts</h4>
                                                        <div class="card">
                                                            <div class="card-body">
                                                                <InputTextArea @bind-Value="postCreateDTO.body" placeholder="What's on your mind?" class="form-control mb-2" />
                                                                <button class="btn btn-primary" type="submit">Post</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </EditForm>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Post</button>
            </div>
        </div>
    </div>
</div>*@

@code {
    PostCreateDTO postCreateDTO = new();

    List<Post> posts = new();
    string image = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;
    private string postBody { get; set; } = string.Empty;

    // Edw prepei na bei h lista twn hobby pou akoloutha
    // o xrhsths kai na epilegei o idios me dropDownList
    private string hobbyName = "Sports";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;

        try
        {
            image = _config.GetValue<string>("api") + "/images/default.jpg";

            // See all users in console
            posts = await _postsService.GetPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void CreatePost()
    {
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;
        //postCreateDTO.body = postBody;

        if (string.IsNullOrEmpty(postCreateDTO.body))
        {
            navManager.NavigateTo("/posts");
        }
        else
        {
            _postsService.CreatePost(postCreateDTO);
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }
}

@*@code {
    PostCreateDTO postCreateDTO = new();

    List<Post> posts = new();
    string image = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;
    private string postBody { get; set; } = string.Empty;

    // Edw prepei na bei h lista twn hobby pou akoloutha
    // o xrhsths kai na epilegei o idios me dropDownList
    private string hobbyName = "Sports";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;

        try
        {
            image = _config.GetValue<string>("api") + "/images/default.jpg";

            // See all users in console
            await LoadPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadPosts()
    {
        posts = await _postsService.GetPosts();
    }

    private async Task CreatePost()
    {
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;

        if (!string.IsNullOrEmpty(postBody))
        {
            _postsService.CreatePost(postCreateDTO);
            postBody = string.Empty; // Clear the input field
            await LoadPosts(); // Load posts again
            await InvokeAsync(StateHasChanged); // Force the component to re-render
        }
    }
}*@