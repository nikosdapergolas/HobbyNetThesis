@page "/posts"
@inject IPostsService _postsService
@inject IConfiguration _config
@inject NavigationManager navManager
@attribute [Authorize]

<section class="container mt-5" id="postContainer">
    <button type="button" class="btn btn-primary btn-lg rounded-pill" data-bs-toggle="modal" data-bs-target="#postModal">
        <i class="fas fa-pencil-alt me-2"></i> Post Your Thoughts
    </button>
    <br />
    <br />

    <div class="mt-5">
        <div class="card bg-secondary rounded-pill">
            <div class="card-body text-center">
                <h1 class="mb-0 text-white">Recent Posts</h1>
            </div>
        </div>

        <br />
        <br />

        <div class="card-deck" id="postCardDeck">
            @foreach (var post in posts)
            {
                <div class="card mb-4 rounded-pill">
                    <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between rounded-pill">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle profile-picture">
                                <!-- Profile Picture Image -->
                                <img src="@image" alt="Profile Picture" />
                            </div>
                            <div class="ms-3">
                                <h5 class="card-title">@post.Username</h5>
                                <small class="text-white">@post.HobbyName</small>
                                <br />
                                <small class="text-white">@post.timestamp.ToString("MMMM dd, yyyy")</small>
                            </div>
                        </div>
                        <li class="nav-item dropdown">
                            <!-- Post Options Button (e.g., Like, Comment, Share) -->
                            <button type="button" class="btn btn-link text-white" data-bs-toggle="dropdown" id="dropdownToggle">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>

                            <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                                <a class="dropdown-item" href="#">Action</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <a class="dropdown-item" href="#">Something else here</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#">Separated link</a>
                            </div>
                        </li>
                    </div>
                    <div class="card-body">
                        <p class="card-text fs-5 lh-lg">@post.body</p>
                    </div>
                    <div class="card-footer bg-secondary rounded-pill">
                        <!-- Like, Comment, Share Buttons -->
                        <button type="button" class="btn btn-primary rounded-pill">
                            <i class="far fa-thumbs-up"></i> Like
                        </button>
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        <button type="button" class="btn btn-success rounded-pill">
                            <i class="far fa-comment-alt"></i> Comment
                        </button>
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        <button type="button" class="btn btn-dark rounded-pill">
                            <i class="fas fa-share"></i> Share
                        </button>
                    </div>
                </div>
            }
        </div>


    </div>

    @if (isLoading)
    {
        <br />
        <div class="text-center">
            <div class="spinner-grow text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-secondary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-danger" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-light" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <button @onclick="LoadMorePosts" class="btn btn-outline-light btn-lg d-flex justify-content-center align-items-center load-more-button" role="button">
        <h4>Load more posts</h4>
    </button>
    @*<button class="btn btn-primary" @onclick="LoadMorePosts">Load more posts</button>*@
</section>


<!--Modal-->
<div class="modal fade" id="postModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postCreateDTO.body"
                                        id="postBody"
                                        placeholder="What's on your mind?"
                                        class="form-control"
                                        rows="8"
                                        style="resize: none;"
                                        MaxLength="250" />
                    </div>
                    <br />
                    @*<div class="text-center">
                    <button class="btn btn-primary btn-lg" type="submit">Post</button>
                    </div>*@
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Post</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    PostCreateDTO postCreateDTO = new();

    List<Post> posts = new();
    string image = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;
    private string name = string.Empty;
    private string postBody { get; set; } = string.Empty;

    // Edw prepei na bei h lista twn hobby pou akoloutha
    // o xrhsths kai na epilegei o idios me dropDownList
    private string hobbyName = "Sports";

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await AuthState;

    //    //image = _config.GetValue<string>("api") + "/images/default.jpg";

    //    userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
    //    name = authState.User.FindFirst(ClaimTypes.Name).Value;
    //    image = authState.User.FindFirst(ClaimTypes.Uri).Value;



    //    try
    //    {
    //        image = _config.GetValue<string>("api") + "/images/default.jpg";

    //        // See all users in console

    //        posts = await _postsService.GetPosts();
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine(ex.Message);
    //    }
    //}

    //====================================================================================
    // Bard AI implementation

    private bool isLoading = false;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var authState = await AuthState;
        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
        name = authState.User.FindFirst(ClaimTypes.Name).Value;
        image = authState.User.FindFirst(ClaimTypes.Uri).Value;

        try
        {
            image = _config.GetValue<string>("api") + "/images/default.jpg";

            // Load initial set of posts using the new endpoint
            posts = await _postsService.GetSomePosts(currentPage);

            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadMorePosts()
    {
        if (isLoading) return;

        isLoading = true;
        try
        {
            currentPage++;
            var newPosts = await _postsService.GetSomePosts(currentPage);
            if (newPosts != null && newPosts.Any())
            {
                posts.AddRange(newPosts);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading more posts: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    //@functions {
    //    // Add event handler for scroll
    //    private async Task OnScroll(WindowScrollEventArgs e)
    //    {
    //        var scrollPosition = e.ScrollTop + e.ClientHeight;
    //        var contentHeight = e.ScrollHeight;

    //        if (scrollPosition >= contentHeight - 100)
    //        {
    //            await LoadMorePosts();
    //            StateHasChanged(); // Update the UI after loading more posts
    //        }
    //    }
    //}

    //====================================================================================
    // Trying to implement the new endpoint to only bring some posts per scroll

    //private bool isLoading = false;
    //private int currentPage = 1;

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await AuthState;
    //    userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
    //    name = authState.User.FindFirst(ClaimTypes.Name).Value;
    //    image = authState.User.FindFirst(ClaimTypes.Uri).Value;

    //    try
    //    {
    //        image = _config.GetValue<string>("api") + "/images/default.jpg";

    //        // Load initial set of posts using the new endpoint
    //        posts = await _postsService.GetSomePosts(currentPage);
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine(ex.Message);
    //    }
    //}

    //private async Task LoadMorePosts()
    //{
    //    if (isLoading) return;

    //    isLoading = true;
    //    try
    //    {
    //        currentPage++;
    //        var newPosts = await _postsService.GetSomePosts(currentPage);
    //        if (newPosts != null && newPosts.Any())
    //        {
    //            posts.AddRange(newPosts);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine("Error loading more posts: " + ex.Message);
    //    }
    //    finally
    //    {
    //        isLoading = false;
    //    }
    //}

    //@functions {
    //    // Add event handler for scroll
    //    private async Task OnScroll(ScrollEventArgs e)
    //    {
    //        var scrollPosition = e.TargetElement.ScrollTop + e.TargetElement.ClientHeight;
    //        var contentHeight = e.TargetElement.ScrollHeight;

    //        if (scrollPosition >= contentHeight - 100)
    //        {
    //            await LoadMorePosts();
    //            StateHasChanged(); // Update the UI after loading more posts
    //        }
    //    }
    //}

    //====================================================================================

    

    private void CreatePost()
    {
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;
        //postCreateDTO.body = postBody;

        if (string.IsNullOrEmpty(postCreateDTO.body))
        {
            navManager.NavigateTo("/posts");
        }
        else
        {
            _postsService.CreatePost(postCreateDTO);
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }
}

