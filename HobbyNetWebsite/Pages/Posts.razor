@page "/posts"
@inject IPostsService _postsService
@inject IConfiguration _config
@inject NavigationManager navManager
@attribute [Authorize]

<section class="container mt-5">
    <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#postModal">
        <i class="fas fa-pencil-alt me-2"></i> Post Your Thoughts
    </button>
    <br />
    <br />

    <div class="mt-5">
        <h2 class="mb-4">Recent Posts</h2>
        <div class="card-deck">
            @foreach (var post in posts)
            {
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title">@post.Username</h5>
                        <small class="text-white">@post.timestamp.ToString("MMMM dd, yyyy")</small>
                    </div>
                    <div class="card-body">
                        <p class="card-text fs-5 lh-lg">@post.body</p>
                    </div>
                </div>
            }
        </div>
    </div>
</section>


<!--Modal-->
<div class="modal fade" id="postModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postCreateDTO.body"
                                        id="postBody"
                                        placeholder="What's on your mind?"
                                        class="form-control"
                                        rows="8"
                                        style="resize: none;"
                                        MaxLength="250" />
                    </div>
                    <br />
                    @*<div class="text-center">
                    <button class="btn btn-primary btn-lg" type="submit">Post</button>
                    </div>*@
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Post</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {
    PostCreateDTO postCreateDTO = new();

    List<Post> posts = new();
    string image = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;
    private string name = string.Empty;
    private string postBody { get; set; } = string.Empty;

    // Edw prepei na bei h lista twn hobby pou akoloutha
    // o xrhsths kai na epilegei o idios me dropDownList
    private string hobbyName = "Sports";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        image = _config.GetValue<string>("api") + "/images/default.jpg";

        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;
        name = authState.User.FindFirst(ClaimTypes.Name).Value;

        try
        {
            image = _config.GetValue<string>("api") + "/images/default.jpg";

            // See all users in console
            posts = await _postsService.GetPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void CreatePost()
    {
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;
        //postCreateDTO.body = postBody;

        if (string.IsNullOrEmpty(postCreateDTO.body))
        {
            navManager.NavigateTo("/posts");
        }
        else
        {
            _postsService.CreatePost(postCreateDTO);
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }
}

