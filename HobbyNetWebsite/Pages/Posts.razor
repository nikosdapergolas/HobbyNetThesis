@page "/posts"
@inject IPostsService _postsService
@inject IUserService _userService
@inject IConfiguration _config
@inject NavigationManager navManager
@attribute [Authorize]


<section class="container mt-5" id="postContainer">
    <button type="button" class="btn btn-primary btn-lg rounded-pill" data-bs-toggle="modal" data-bs-target="#postModal" @onclick="refreshDTO">
        <i class="fas fa-pencil-alt me-2"></i> Post Your Thoughts
    </button>
    <br />
    <br />

    <div class="card bg-primary rounded-pill">
        <div class="card-body text-center">
            <h1 class="mb-0 text-white">Recomented Post</h1>
        </div>
    </div>
    @if (recomendedPostWasSelected)
    {
        <br />
        <br />
        <br />
        <div class="card mb-4 rounded-pill">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between rounded-pill">
                <div class="d-flex align-items-center">
                    <div class="rounded-circle profile-picture">
                        <!-- Profile Picture Image -->
                        <img style="cursor: pointer"
                             src="@recomendedPost.image"
                             alt="Profile Picture"
                        @onclick="() => navigateToProfile(recomendedPost.Username)" />
                    </div>
                    <div class="ms-3">
                        @*<h5 class="card-title">@post.Username</h5>*@
                        <a style="text-decoration: none; color: white;  cursor: pointer;"
                           href="profileOfUser/@recomendedPost.Username">
                            <h5 class="card-title">@recomendedPost.Username</h5>
                        </a>
                        <small class="text-white">@recomendedPost.HobbyName</small>
                        <br />
                        <small class="text-white">@recomendedPost.timestamp.ToString("MMMM dd, yyyy")</small>
                    </div>
                </div>
                <div class="nav-item dropdown">
                    <!-- Post Options Button (e.g., Like, Comment, Share) -->
                    <button type="button" class="btn btn-link text-white" data-bs-toggle="dropdown" id="dropdownToggle">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>

                    @if (user.username.Equals(recomendedPost.Username))
                    {
                        <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                            <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#EditPostModal" @onclick="() => assingTheRightPostIdForEdit(recomendedPost.Id,recomendedPost.body)">Edit Post</a>
                            <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deletePostModal" @onclick="() => assingTheRightPostId(recomendedPost.Id)">Delete Post</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="Profile">Visit Profile</a>
                        </div>
                    }
                    else
                    {
                        <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                            <a class="dropdown-item" href="chats">Message user</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#">Report Post</a>
                        </div>
                    }

                </div>
            </div>
            <div class="card-body">
                <p class="card-text fs-5 lh-lg">@recomendedPost.body</p>
            </div>
            <div class="card-footer bg-secondary rounded-pill">
                <!-- Like, Comment, Share Buttons -->
                @*<button id="likebutton" type="button" class="btn btn-primary rounded-pill" @onclick="() => LikeAPost(post.Id)">
            <i class="far fa-thumbs-up"></i> Likes | @post.postLikes?.Count
            </button>*@
                <LikeButton OnLike="() => LikeAPost(recomendedPost.Id)" LikeCount="@recomendedPost.postLikes.Count" />
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                <button type="button" class="btn btn-success rounded-pill" data-bs-toggle="modal" data-bs-target="#CommentsModal" @onclick="() => fillListWithComments(recomendedPost.comments, recomendedPost.Id)">
                    <i class="far fa-comment-alt"></i> Comments | @recomendedPost.comments?.Count
                </button>
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                <button type="button" class="btn btn-dark rounded-pill" data-bs-toggle="modal" data-bs-target="#shareModal" @onclick="() => shareThePost(recomendedPost.body, recomendedPost.Username)">
                    <i class="fas fa-share"></i> Repost
                </button>
            </div>
        </div>
    }
    else
    {
        <br />
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

    <br />
    <br />

    <div class="mt-5">
        <div class="card bg-secondary rounded-pill">
            <div class="card-body text-center">
                <h1 class="mb-0 text-white">Recent Posts from All Hobbies</h1>
            </div>
        </div>

        <br />

        <div class="dropdown-center">
            <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Select A Hobby to see posts
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="posts">All Hobbies</a></li>
                @foreach (var hobby in user.Hobbies)
                {
                    <li><a style="cursor: pointer;" class="dropdown-item" @onclick='() => NavigateToURL(hobby.hobby.hobbyName)'>@hobby.hobby.hobbyName</a></li>
                }
            </ul>
        </div>

        <br />

        <div class="card-deck" id="postCardDeck">
            @foreach (var post in posts)
            {
                <div class="card mb-4 rounded-pill">
                    <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between rounded-pill">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle profile-picture">
                                <!-- Profile Picture Image -->
                                <img style="cursor: pointer"
                                     src="@post.image" 
                                     alt="Profile Picture" 
                                     @onclick="() => navigateToProfile(post.Username)"/>
                            </div>
                            <div class="ms-3">
                                @*<h5 class="card-title">@post.Username</h5>*@
                                <a style="text-decoration: none; color: white;  cursor: pointer;"
                                   href="profileOfUser/@post.Username">
                                    <h5 class="card-title">@post.Username</h5>
                                </a>
                                <small class="text-white">@post.HobbyName</small>
                                <br />
                                <small class="text-white">@post.timestamp.ToString("MMMM dd, yyyy")</small>
                            </div>
                        </div>
                        <div class="nav-item dropdown">
                            <!-- Post Options Button (e.g., Like, Comment, Share) -->
                            <button type="button" class="btn btn-link text-white" data-bs-toggle="dropdown" id="dropdownToggle">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>

                            @if (user.username.Equals(post.Username))
                            {
                                <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                                    <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#EditPostModal" @onclick="() => assingTheRightPostIdForEdit(post.Id,post.body)">Edit Post</a>
                                    <a style="cursor: pointer" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#deletePostModal" @onclick="() => assingTheRightPostId(post.Id)">Delete Post</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="Profile">Visit Profile</a>
                                </div>
                            }
                            else
                            {
                                <div class="dropdown-menu" aria-labelledby="dropdownToggle">
                                    <a class="dropdown-item" href="chats">Message user</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="#">Report Post</a>
                                </div>
                            }

                        </div>
                    </div>
                    <div class="card-body">
                        <p class="card-text fs-5 lh-lg">@post.body</p>
                    </div>
                    <div class="card-footer bg-secondary rounded-pill">
                        <!-- Like, Comment, Share Buttons -->
                        @*<button id="likebutton" type="button" class="btn btn-primary rounded-pill" @onclick="() => LikeAPost(post.Id)">
                            <i class="far fa-thumbs-up"></i> Likes | @post.postLikes?.Count
                        </button>*@
                        <LikeButton OnLike="() => LikeAPost(post.Id)" LikeCount="@post.postLikes.Count" />
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        <button type="button" class="btn btn-success rounded-pill" data-bs-toggle="modal" data-bs-target="#CommentsModal" @onclick="() => fillListWithComments(post.comments, post.Id)">
                            <i class="far fa-comment-alt"></i> Comments | @post.comments?.Count
                        </button>
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        &nbsp;
                        <button type="button" class="btn btn-dark rounded-pill" data-bs-toggle="modal" data-bs-target="#shareModal" @onclick="() => shareThePost(post.body, post.Username)">
                            <i class="fas fa-share"></i> Repost
                        </button>
                    </div>
                </div>
            }
        </div>


    </div>

    @if (isLoading)
    {
        <br />
        <div class="text-center">
            <div class="spinner-grow text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-secondary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-danger" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-light" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <button @onclick="LoadMorePosts" class="btn btn-outline-light btn-lg d-flex justify-content-center align-items-center load-more-button" role="button">
        <h4>Load more posts</h4>
    </button>
    @*<button class="btn btn-primary" @onclick="LoadMorePosts">Load more posts</button>*@
</section>


<!--Modal for posting-->
<div class="modal fade" id="postModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="postModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postCreateDTO" OnValidSubmit="CreatePost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postCreateDTO.body"
                                        id="postBody"
                                        placeholder="What's on your mind?"
                                        class="form-control"
                                        rows="8"
                                        style="resize: none;"
                                        MaxLength="250" />
                    </div>
                    <br />
                    @*<div class="text-center">
                    <button class="btn btn-primary btn-lg" type="submit">Post</button>
                    </div>*@
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Post</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!--Modal for Editing a post-->
<div class="modal fade" id="EditPostModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="EditPostModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postEditDTO" OnValidSubmit="EditPost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postEditDTO.body"
                                       id="editBody"
                                       placeholder="What's on your mind?"
                                       class="form-control"
                                       rows="8"
                                       style="resize: none;"
                                       MaxLength="250">

                            @postEditDTO.body;

                        </InputTextArea>
                    </div>
                    <br />
                    @*<div class="text-center">
                    <button class="btn btn-primary btn-lg" type="submit">Post</button>
                    </div>*@
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Submit Edit</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<!--Modal for Deleting a Post-->
<div class="modal fade" id="deletePostModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deletePostModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h2> Are you sure you want to delete this post?</h2>
                <br />
                <br />
                <button class="btn btn-primary rounded-pill" @onclick="@deletePost">
                    Yes. Delete it
                </button>
            </div>
        </div>
    </div>
</div>

<!--Modal for Comments on a Post-->
<div class="modal fade" id="CommentsModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="CommentsModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Comments of this post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <br />
                @foreach(var comment in listOfComments)
                {
                    <h5> User: @comment.user.username</h5>
                    <h3><b>@comment.body</b></h3>
                    <hr />
                }
                <EditForm Model="commentDTO">
                    <InputTextArea @bind-Value="commentDTO.body"
                                   id="postBody"
                                   placeholder="Write a comment for this post."
                                   class="form-control"
                                   rows="8"
                                   style="resize: none;"
                                   MaxLength="250" />
                </EditForm>
                
                <br>
                <button class="btn btn-primary rounded-pill" @onclick="@CommentOnPost">
                    Send Comment
                </button>
            </div>
        </div>
    </div>
</div>

<!--Modal for sharing a Post-->
<div class="modal fade" id="shareModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="shareModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="postModalLabel">Post your Thoughts @name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="postCreateDTO" OnValidSubmit="performTheSharingOfThePost">
                    <div class="form-group">
                        <InputTextArea @bind-Value="postCreateDTO.body"
                                       id="postBody"
                                       placeholder="What's on your mind?"
                                       class="form-control"
                                       rows="8"
                                       style="resize: none;"
                                       MaxLength="250" >

                            
                            @*<b>Shared this post by user: @usernameOfUserThatIWillShareHisPost</b>*@
                            
                            @*@postCreateDTO.body*@
                        </InputTextArea>
                    </div>
                    <br />
                    <div class="row text-center">
                        <div class="col-12">
                            <button class="btn btn-primary btn-block btn-lg" type="submit">Share this post</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    Post recomendedPost = new();
    CommentDTO commentDTO = new();
    List<Comment> listOfComments = new();
    PostEditDTO postEditDTO = new();
    PostCreateDTO postCreateDTO = new();
    User user = new();

    List<Post> posts = new();
    string image = string.Empty;
    int PostIdToDelete;
    bool recomendedPostWasSelected = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;
    private string name = string.Empty;
    private string postBody { get; set; } = string.Empty;

    // Edw prepei na bei h lista twn hobby pou akoloutha
    // o xrhsths kai na epilegei o idios me dropDownList
    private string hobbyName = "General Thoughts";


    private bool isLoading = false;
    private int currentPage = 1;

    LikePostDTO likePostDTO = new();

    protected override async Task OnInitializedAsync()
    {
        recomendedPostWasSelected = false;
        await RecomendOnePost();
        commentDTO = new();
        PostIdToDelete = -1;
        isLoading = true;
        var authState = await AuthState;
        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;


        try
        {
            //image = _config.GetValue<string>("api") + "/images/default.jpg";

            // Get Logged in user
            user = await _userService.GetOneUserByUsername(userName);

            // Load initial set of posts using the new endpoint
            posts = await _postsService.GetSomePosts(currentPage);

            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            name = user.firstname;
            image = user.profileImage!;
        }
    }

    private async Task LoadMorePosts()
    {
        if (isLoading) return;

        isLoading = true;
        try
        {
            currentPage++;
            var newPosts = await _postsService.GetSomePosts(currentPage);
            if (newPosts != null && newPosts.Any())
            {
                posts.AddRange(newPosts);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading more posts: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task refreshDTO()
    {
        postCreateDTO = new();
    }

    private void CreatePost()
    {
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;
        postCreateDTO.image = image;
        //postCreateDTO.body = postBody;

        if (string.IsNullOrEmpty(postCreateDTO.body))
        {
            navManager.NavigateTo("/posts");
        }
        else
        {
            _postsService.CreatePost(postCreateDTO);
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }

    private async Task deletePost()
    {
        var response = _postsService.DeletePost(PostIdToDelete);
        // Refresh After deletion
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task assingTheRightPostId(int postId)
    {
        PostIdToDelete = postId;
    }

    private async Task EditPost()
    {
        var response = _postsService.EditPost(postEditDTO);
        // Refresh After deletion
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task assingTheRightPostIdForEdit(int postId, string body)
    {
        postEditDTO.Id = postId;
        postEditDTO.body = body;
    }

    private async Task navigateToProfile(string username)
    {
        navManager.NavigateTo("profileOfUser/" + username);
    }

    private async Task LikeAPost(int postId)
    {
        likePostDTO = new();
        likePostDTO.postId = postId;
        likePostDTO.userId = user.Id;
        var result = await _postsService.LikePost(likePostDTO);

        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private async Task fillListWithComments(List<Comment> comments, int postId)
    {
        commentDTO.postId = postId;
        listOfComments = new();
        foreach (var comment in comments)
        {
            listOfComments.Add(comment);
        }
    }

    //private async Task enterAPostIdToComment()
    //{
    //}

    private async Task CommentOnPost()
    {
        commentDTO.username = userName;
        var result = await _postsService.CommentPost(commentDTO);

        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }

    private string usernameOfUserThatIWillShareHisPost = string.Empty;
    private async Task shareThePost(string body, string username)
    {
        usernameOfUserThatIWillShareHisPost = username;
        //postCreateDTO = new();
        postCreateDTO.body = body;
    }

    private async Task performTheSharingOfThePost()
    {
        postCreateDTO.body = "Reposted this post by User: " +
            usernameOfUserThatIWillShareHisPost +
            "\n\n   =>   " +
            postCreateDTO.body;
        postCreateDTO.Username = userName;
        postCreateDTO.HobbyName = hobbyName;
        postCreateDTO.image = image;
        //postCreateDTO.body = postBody;

        if (string.IsNullOrEmpty(postCreateDTO.body))
        {
            navManager.NavigateTo("/posts");
        }
        else
        {
            await _postsService.CreatePost(postCreateDTO);
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
    }

    private async Task NavigateToURL(string hobby)
    {
        navManager.NavigateTo("/Hobby/" + hobby, forceLoad: true);
    }

    private async Task RecomendOnePost()
    {
        var allPosts = await _postsService.GetPosts();

        int index = 0;
        foreach (var post in allPosts)
        {
            index++;
            if (index.Equals(1))
            {
                recomendedPost = new();
                recomendedPost = post;
            }
            else
            {
                if (recomendedPost.postLikes.Count < post.postLikes.Count)
                {
                    recomendedPost = new();
                    recomendedPost = post;
                }
            }
        }
        recomendedPostWasSelected = true;
    }
}

