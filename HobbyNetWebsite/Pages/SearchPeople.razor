@page "/SearchPeople"
@inject IPostsService _postsService
@inject IUserService _userService
@inject IFollowersService _followersService
@inject IConfiguration _config
@inject NavigationManager navManager
@attribute [Authorize]

<div class="container mt-5">
    <div class="search-container">
        <h2>Find People to Follow</h2>
        <div class="mb-3">
            <input type="text" class="form-control search-input" placeholder="Search for people..." @bind-value="@searchTerm" @oninput="ChangeSearchTermText">
        </div>
        @*<button class="btn search-button" @onclick="SearchUsers(searchTerm)">Search</button>*@
        <div class="search-results">
            @if (searchTerm.Length > 0)
            {
                @foreach (var user in filteredUsers)
                {
                    if (user.username.Equals(userName))
                    {
                        // Do not show the user himself
                        continue;
                    }
                    <div class="user-card">
                        <div class="row">
                            <div class="col-3">
                                <img src="@user.profileImage"
                                     @onclick="() => navigateToProfile(user.username)"
                                     alt="User" 
                                     style="width: 100px; height:100px; z-index: 1; cursor: pointer;">
                            </div>
                            <div class="col-9">
                                <a style="text-decoration: none; color: black;  cursor: pointer;" 
                                   href="profileOfUser/@user.username">
                                        <h5>@user.username</h5>
                                </a>
                                @*<p>Followers: @user.FollowersCount</p>*@
                                @if (following.Contains(user.username.Trim()))
                                {
                                    <button id="unfollow_button" class="btn btn-danger" @onclick="@(e => ActionToDo("unfollow", user.username))">Unfollow</button>
                                }
                                else if (!following.Contains(user.username) && followers.Contains(user.username))
                                {
                                    <button id="follow_back_button" class="btn btn-primary" @onclick="@(e => ActionToDo("follow_back", user.username))">Follow Back</button>
                                }
                                else
                                {
                                    <button id="follow_button" class="btn btn-primary" @onclick="@(e => ActionToDo("follow", user.username))">Follow</button>
                                }
                            </div>
                            @if (actionInProgress)
                            {
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    List<User> users = new();
    List<User> filteredUsers = new();
    FollowersDTO followersDTO;
    bool actionInProgress;


    IEnumerable<string> followers = new List<string>();
    IEnumerable<string> following = new List<string>();

    string searchTerm = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        actionInProgress = false;
        List<User> filteredUsers = new();
        var authState = await AuthState;

        userName = authState.User.FindFirst(ClaimTypes.GivenName).Value;

        try
        {
            // To see who follows this user
            followers = await _followersService.GetFollowersOfOnePerson(userName);

            // To see how many people this user follows
            following = await _followersService.GetAllPeopleOneUserFollows(userName);

            users = await _userService.GetUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    void ChangeSearchTermText(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        SearchUsers();
    }

    void SearchUsers()
    {
        filteredUsers = users.Where(u => u.username.StartsWith(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    void ActionToDo(string action, string username)
    {
        if (action.Equals("follow") || action.Equals("follow_back"))
        {
            // Here we call the service to follow the chosen user
            actionInProgress = true;

            followersDTO = new();
            followersDTO.FollowerUsername = username; // Username of the chosen user to follow
            followersDTO.FolloweeUsername = userName; // Bad naming, but this is the username of the logged in user

            string result = string.Empty;
            try
            {
                result = _followersService.FollowAPerson(followersDTO).ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                actionInProgress = false;
                StateHasChanged();
            }

            // Reload the page if everything went down smoothly
            if (!string.IsNullOrEmpty(result))
            {
                navManager.NavigateTo(navManager.Uri, forceLoad: true);
            }
        }
        else
        {
            // Here we call the service to unfollow the chosen user
            actionInProgress = true;

            followersDTO = new();
            followersDTO.FollowerUsername = username; // Username of the chosen user to unfollow
            followersDTO.FolloweeUsername = userName; // Bad naming, but this is the username of the logged in user

            try
            {
                var result = _followersService.UnfollowAPerson(followersDTO);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            finally
            {
                actionInProgress = false;

                // Reload the page if everything went down smoothly
                navManager.NavigateTo(navManager.Uri, forceLoad: true);
            }

            //if (!string.IsNullOrEmpty(result))
            //{
            //}
        }
    }

    private async Task navigateToProfile(string username)
    {
        navManager.NavigateTo("profileOfUser/" + username);
    }
}
