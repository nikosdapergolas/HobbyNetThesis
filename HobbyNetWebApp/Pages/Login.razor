@page "/login"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject IConfiguration _config

@if (showAuthenticationError == true)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

<div class="container">
    <div class="row">
        <div class="col-auto">
            <a href="/login" class="logo">
                <img src="@($"{api}images/logo.png")" width="40" height="40" alt="Hobbynet Logo" />
            </a>
        </div>
        <div class="col-auto">
            <h2 class="sign-up-text">Welcome to Hobby Net</h2>
        </div>
    </div>

    <EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light" >
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-wraper">
            <h3 class="signup-text">Login</h3>
        </div>
        <br />
        <div class="form-group row">
            <div class="col-md-12">
                @*<InputText placeholder="Enter Username" id="username" class="form-controll" @bind-Value="model.Username" />*@
                <MudTextField T="string"
                              Label="Username"
                              Required="true"
                              RequiredError="Username is required!"
                              @bind-Value="model.Username" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
        </div>
        <br />
        <div class="form-group row">
            <div class="col-md-12">
                @*<InputText type="password" placeholder="Enter Password" id="password" class="form-controll" @bind-Value="model.Password" />*@
                <MudTextField T="string"
                              Label="Username"
                              Required="true"
                              RequiredError="Username is required!"
                              @bind-Value="model.Password" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12">
                <button type="submit" class="btn btn-success">Login</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <NavLink class="nav-link" href="register">Register</NavLink>
            </div>
        </div>
    
    </EditForm>
</div>

@if (showAuthenticationError)
{
    <div class="text-danger">
        @authenticationErrorText
    </div>
}

@*<div class="container">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm OnValidSubmit="ExecuteLogin" class="card card-body bg-light">
                    <MudTextField T="string"
                                  Label="Username"
                                  Required="true"
                                  RequiredError="Username is required!"
                    @bind-Value="model.Username" />
                    <MudTextField T="string"
                                  Label="Password"
                                  HelperText="Choose a strong password"
                    @bind-Value="model.Password"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Password is required!" />
                    <div class="d-flex align-center justify-space-between">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>*@


@code {
    private string api = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        api = _config.GetValue<string>("api");
    }

    private AuthenticationUserModel model = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private async Task ExecuteLogin()
    {

        showAuthenticationError = false;

        string result = await AuthService.Login(model);

        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an Error when trying to login!";
            showAuthenticationError = true;
        }
    }
}
